	
	
	一、同步加载
		<script src=""></script>
		又称阻塞模式，会阻止浏览器的后续处理，停止后续的解析，
		只有当前加载完成才能进行下一步操作，所以默认同步执行是安全的。
		但这样如果js有输出document内容、修改dom、重定向等行为，就会造成页面阻塞，
		所以一般建议把script标签放在body结尾处，尽量减少页面阻塞
		
	
	二、异步加载js方法
		又称非阻塞加载，浏览器在下载执行js的同时，还会同时继续后续页面的处理
		
		
		1》defer
			所有defer脚本必须保证并按顺序执行
			<script src="" defer></script>
		
		2》async
			<script src="" defer async></script>
			一旦脚本可用，则会一步执行
			作用同defer，但不能保证脚本按顺序执行，他们将在onload事件之前执行
			
			async属性仅适用与外部脚本（只有在使用src属性时）
			1>async="async":脚本相对于页面的其余部分异步的执行
			2>不适用async，但defer=“defer”：脚本将在页面完成解析时执行
			3>不用async也不实用defer：在浏览器继续解析页面之前
			
		3》script DOM Element----创建script 插入到DOM中，加载完毕后callback	
			（function(){
				var script=document.createElement("script");
				script.type="text/javascript";
				script.async=true;
				script.src="xx.js";
				var head=document.getElementsByTagName("head")[0];
				head.insertBefore(script,head.firstChild);
			}）();
			
			此种加载方式执行完之前阻止onload事件的触发，
			现在很多页面的代码都在onload时执行，所以还是会阻塞部分页面的初始化处理
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			