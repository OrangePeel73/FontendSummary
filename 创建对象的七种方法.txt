	
	创建对象的七种方法

1》工厂模式
	function create(name,job){
		var o=new Object();
		o.name=name;
		o.job=job;
		o.sayName=function(){consolo.log(this.name)}
		return o;
	}
	var obj1=create('tom','student');
	var obj2=create('alicy','doctor');
	1>可以无数次调用这个工厂模式，每次都会返回一个包含两个属性和一个方法的对象
	2>解决了多个相似对象的问题
	3>问题：没有解决对象识别问题，即不能知道一个对象的类型
	
2》构造函数
	function create(name,job){
		this.name=name;
		this.job=job;
		this.sayName=function(){console.log(this.name)}
	}
	var obj1=new create('tom','student');
	var obj2=new create('jack','student');
	使用new后会执行如下操作：
		创建一个新对象
		新对象会被执行[[prototype]]链接
		新对象会绑定到函数调用的this
		返回这个对象
	
	1>优点：可以检测对象类型
	2>缺点：每个方法都要在实例上重新创建一次
	

3》原型模式
	function person(){}
	person.prototype.name='tom';
	person.prototype.job='student';
	person.prototype.sayName=function(){console.log(this.name)}
	var p=new person();
	将信息直接添加到原型对象上。
	1>优点：可以让所有的实例对象共享他所包含的属性和方法，不必在构造函数中定义对象实例信息
	2>缺点：主要问题来自包含引用类型值的原型
	
4》组合使用构造函数和原型模式
	1>优点：每个实例都有自己的实力属性副本,解决了原型模式和构造函数模式出现的问题
		function person(name){
			this.name=name;
			this.color=['green','blue','red'];
		}
		person.prototype.sayName=function(){console.log(this.name)}//原型模式
		var p1=new person();
		var p2=new person();
		p1.color.push('black');
		console.log(p1.color);
		console.log(p2.color);
		
5》动态原型模式
	将所有的信息都封装在了构造函数中，
	初始化时，通过检测某个应该存在的方法时有效，来决定是否需要初始化原型。
	function person(name,job){
		this.name=name;//属性
		this.job=job;
		if(typeof this.sayName!=='function'){//方法
			person.prototype.sayName=function(){console.log(this.name)}
		}
	}
	var p1=new person('jiang''student');
	p1.sayName();
	只有在sayName方法不存在时才会把他添加到原型中。
	这段代码智慧初次调用构造函数时才会执行。
	此后原型已经完成初始化，不需要在做什么修改了。
	这里对原型的修改能够立即在所有实例中得到反映，即包含引用类型值得问题
	if语句检查的可以是初始化之后应该存在的任何属性或方法，
	所以不必用一大堆的if语句检查每一个属性和方法，
	只要检查一个就行。
		
	
6》寄构造函数模式
	基本思想：创建一个函数，该函数的作用仅仅是封装创建对昂的代码，然后再返回新建的对象。
	
	除了使用new操作符并把使用的包装函数叫做构造函数外，和工厂模式几乎一样。
	function person(name,job){
		var o=new Object();
		o.name=name;
		o.job=job;
		o.sayName=function(){consolo.log(this.name)}
		return o;
	}
	var obj1=new person('tom','student');
	obj1.sayName();
	
7》稳妥构造函数模式
	稳妥对象：没有公共属性，且其方法也不引用this。
	稳妥对象最适合一些安全的环境中（禁止使用this和new），
	或防止数据被其他应用程序改动时应用。
	
	与寄生式模式类似，不同的是：
		创建对象的实例方法不引用this，而是不使用new操作符调用构造函数
		
	function person(name,job){
		var o=new Object();
		o.name=name;
		o.job=job;
		o.sayName=function(){consolo.log(name)}
		return o;
	}
	var obj1=person('tom','student');
	obj1.sayName();
	
	
	
	
	
	
	