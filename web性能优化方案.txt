	
	web性能优化方案

	1》减少http请求数，减少下载量
		1>从设计实现层面简化页面
		
		2>合理设置http缓存
		
		3>资源合并与压缩
		
		4>css Sprites
			合并css图片
		
		5>inline images
	2》文件合并、文件最小化/文件压缩、使用CDN托管、缓存的使用
	
	3》异步执行inline脚本
	
	4》样式表放在顶部，脚本文件放在底部、避免css表达式，
		把脚本的样式表放在外部，移除重复脚本
	
	5》异步请求callback
	
	6》避免重复的资源请求
	
	7》慎用with，避免使用eval和Function
	
	8》减少作用域链查找
	
	9》图片压缩
	
	10》避免全局查找
	
	11》对于不断运行的代码，使用setinterval而不用settimeout，
		因为settimeout每一次都会初始化一个settimeout定时器
		
	12》使用模板元素clone，替代createElement
	
	13》使用事件代理
		对于内容动态添加并且子节点都需要相同的事件处理函数的情况，
		可以把事件处理注册提到父节点上，这样就不需要为每个节点注册事件监听了。
	
	14》优化循环
		减值迭代
			大多数循环从0开始，增加到某个特定值得迭代器，
			在很多情况下，从最大值开始，在循环中不断减值的迭代器更加高效
		
		简化终止条件
			每次循环都会计算终止条件，所以保证他尽可能快，
			对数组或者列表对象遍历时，提前将length保存在局部变量中，
			避免在每次循环中都要重新计算终止条件
	15》		
	